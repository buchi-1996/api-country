{"version":3,"sources":["components/Header.jsx","components/CountryCard.jsx","components/Country.jsx","components/Details.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","AppBar","position","className","Toolbar","Container","Button","CountryCard","name","flag","population","region","capital","Grid","item","xs","sm","md","lg","to","Card","CardMedia","style","height","image","title","CardContent","value","displayType","thousandSeparator","useStyles","makeStyles","root","borderColor","Country","useState","Countries","setCountries","select","setSelect","Search","setSearch","classes","useEffect","a","fetch","response","json","resData","dataFile","map","data","nativeName","borderCountries","borders","languages","currencies","subregion","topLevelDomain","callingCodes","alpha3Code","getCountries","handleChange","e","target","filteredCountries","filter","country","toLowerCase","includes","maxWidth","type","onChange","placeholder","FormControl","Select","variant","MenuProps","getContentAnchorEl","anchorOrigin","vertical","horizontal","MenuItem","container","spacing","index","key","Details","useParams","setCountry","setCurrencies","setLanguages","setBorders","console","log","borderUrl","join","borderResponse","borderData","ok","countryFetch","color","startIcon","x","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.22f7a26a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { AppBar, Container, Toolbar, Button } from \"@material-ui/core\";\r\nimport NightsStayOutlinedIcon from \"@material-ui/icons/NightsStayOutlined\";\r\nimport \"./header.css\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <AppBar position=\"static\" className=\"header\">\r\n      <Toolbar>\r\n        <Container className=\"header__nav\">\r\n          <h3>Where in the world?</h3>\r\n          <Button className=\"night__btn\">\r\n          <div className=\"toggle__mode\">\r\n            <NightsStayOutlinedIcon className=\"night__icon\" />\r\n            Dark Mode\r\n          </div>\r\n          </Button>\r\n        </Container>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport {\r\n  Grid,\r\n  Card,\r\n  CardMedia,\r\n  CardContent,\r\n} from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport NumberFormat from \"react-number-format\";\r\n\r\n\r\n\r\nimport \"./countrycard.css\";\r\n\r\n\r\n\r\nfunction CountryCard({ name, flag, population, region, capital}) {\r\n  \r\n  return (\r\n    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n      <Link to={`/details/${name}`}  className=\"grid__flex link\">\r\n      <Card className=\"card__flex\">\r\n          <CardMedia style={{ height: \"200px\" }} image={flag} title={name} />\r\n          <CardContent className=\"card__text\">\r\n            <h4>\r\n                {name}\r\n            </h4>\r\n            <p>\r\n              <label>Population:</label> <span>\r\n                <NumberFormat\r\n                  value={population}\r\n                  displayType={\"text\"}\r\n                  thousandSeparator={true}\r\n                />\r\n              </span>\r\n            </p>\r\n            <p>\r\n              <label>Region:</label> <span>{region}</span>\r\n            </p>\r\n            <p>\r\n              <label>Capital:</label> <span>{capital}</span>\r\n            </p>\r\n          </CardContent>\r\n      </Card>\r\n      </Link>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default CountryCard;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport {\r\n  FormControl,\r\n  MenuItem,\r\n  Select,\r\n  Grid,\r\n  Container,\r\n} from \"@material-ui/core\";\r\n// import { Link } from \"react-router-dom\";\r\nimport CountryCard  from './CountryCard';\r\nimport \"./country.css\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    \"& .MuiOutlinedInput-root .MuiOutlinedInput-notchedOutline\": {\r\n      borderColor: \"transparent\"\r\n    },\r\n\r\n    \"& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline\": {\r\n      borderColor: \"transparent\",\r\n    }\r\n  }\r\n});\r\n\r\nfunction Country() {\r\n  const [Countries, setCountries] = useState([]);\r\n  const [select, setSelect] = useState(\"Filter by region\");\r\n  const [Search, setSearch] = useState(\"\");\r\n\r\n  const classes = useStyles();\r\n  \r\n\r\n  useEffect(() => {\r\n    async function getCountries() {\r\n      const response = await fetch(\"https://restcountries.eu/rest/v2/all/\");\r\n      const resData = await response.json();\r\n      const dataFile = resData.map((data) => ({\r\n        name: data.name,\r\n        flag: data.flag,\r\n        capital: data.capital,\r\n        region: data.region,\r\n        population: data.population,\r\n        nativeName: data.nativeName,\r\n        borderCountries: data.borders,\r\n        languages: data.languages,\r\n        currencies: data.currencies,\r\n        subregion: data.subregion,\r\n        topLevelDomain: data.topLevelDomain,\r\n        callingCodes: data.callingCodes,\r\n        alpha3Code: data.alpha3Code\r\n      }));\r\n      // console.log(resData);\r\n      setCountries(dataFile);\r\n    }\r\n\r\n    getCountries();\r\n  }, []);\r\n\r\n  const handleChange = async (e) => {\r\n    const region = e.target.value;\r\n    setSelect(region);\r\n    setSearch(\"\");\r\n  };\r\n\r\n  const filteredCountries = Countries.filter((country) => {\r\n    if (select === \"Filter by region\") {\r\n      return country.name.toLowerCase().includes(Search.toLowerCase());\r\n    } else {\r\n      return (\r\n        country.name.toLowerCase().includes(Search.toLowerCase()) &&\r\n        country.region.toLowerCase().includes(select.toLowerCase())\r\n      );\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <Container maxWidth=\"lg\" className=\"form__row\">\r\n        <div className=\"search__area\">\r\n          <div className=\"search__box1\">\r\n            <SearchIcon className=\"search__icon\" />\r\n            <input\r\n              type=\"text\"\r\n              onChange={(e) => setSearch(e.target.value)}\r\n              className=\"search__box\"\r\n              placeholder=\"Search for a country...\"\r\n            />\r\n          </div>\r\n          <div className=\"search__box2\">\r\n            <FormControl className={classes.root}>\r\n              <Select\r\n                variant=\"outlined\"\r\n                className=\"input__select\"\r\n                value={select}\r\n                onChange={handleChange}\r\n                MenuProps={{\r\n                  getContentAnchorEl: null,\r\n                  anchorOrigin: {\r\n                    vertical: \"bottom\",\r\n                    horizontal: \"left\",\r\n                  }\r\n                }}\r\n              >\r\n                <MenuItem value=\"Filter by region\">Filter by region</MenuItem>\r\n                <MenuItem value=\"Africa\">Africa</MenuItem>\r\n                <MenuItem value=\"Americas\">Americas</MenuItem>\r\n                <MenuItem value=\"Asia\">Asia</MenuItem>\r\n                <MenuItem value=\"Europe\">Europe</MenuItem>\r\n                <MenuItem value=\"Oceania\">Oceania</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </div>\r\n        </div>\r\n      </Container>\r\n      <Container maxWidth=\"lg\">\r\n        <Grid container spacing={3}>\r\n          {filteredCountries.map((country, index) => {\r\n            return <CountryCard key={index} {...country}/>\r\n          })}\r\n        </Grid>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Country;\r\n","import React, { useState, useEffect } from \"react\";\r\n// import axios from 'axios';\r\nimport { Grid, Card, CardMedia, Button, Container } from \"@material-ui/core\";\r\nimport KeyboardBackspaceIcon from \"@material-ui/icons/KeyboardBackspace\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport \"./details.css\";\r\n\r\nfunction Details() {\r\n  const { name } = useParams();\r\n  const [country, setCountry] = useState([]);\r\n  const [currencies, setCurrencies] = useState([]);\r\n  const [languages, setLanguages] = useState([]);\r\n  const [borders, setBorders] = useState([]); \r\n\r\n  useEffect(() => {\r\n    const countryFetch = async () => {\r\n      const response = await fetch(\r\n        `https://restcountries.eu/rest/v2/name/${name}`\r\n      );\r\n      const resData = await response.json();\r\n      console.log(resData[0]);\r\n\r\n      setCountry(resData[0]);\r\n      setCurrencies(resData[0].currencies);\r\n      setLanguages(resData[0].languages);\r\n      \r\n\r\n      const borderLink = \"https://restcountries.eu/rest/v2/alpha?codes=\";\r\n      const borderUrl = resData[0].borders.join(';');\r\n      const borderResponse = await fetch(`${borderLink}${borderUrl}`);\r\n      const borderData = await borderResponse.json();\r\n      \r\n\r\n      if(borderResponse.ok){\r\n        setBorders(borderData);\r\n      }else{\r\n        setBorders([]);\r\n      }\r\n    };\r\n\r\n    countryFetch();\r\n  }, [name]);\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      <Link to=\"/\" className=\"back__link\">\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          className=\"details__btn\"\r\n          startIcon={<KeyboardBackspaceIcon />}\r\n        >\r\n          Back\r\n        </Button>\r\n      </Link>\r\n      <div className=\"description__area\">\r\n        <Grid container spacing={3}>\r\n          <Grid item className=\"right-col\" xs={12} md={6}>\r\n            <Card className=\"des__card\">\r\n              <CardMedia\r\n                style={{ height: \"50vh\"}}\r\n                title={country.name}\r\n                image={country.flag}\r\n                className=\"country__flag\"\r\n              />\r\n            </Card>\r\n          </Grid>\r\n          <Grid item className=\"left__col\" xs={12} md={6}>\r\n            <h2>{country.name}</h2>\r\n            <div className=\"country__info\">\r\n              <div className=\"country__info__left\">\r\n                <p>\r\n                  <label>Native Name:</label> <span>{country.nativeName}</span>\r\n                </p>\r\n                <p>\r\n                  <label>Population:</label> <span>\r\n                    <NumberFormat\r\n                      value={country.population}\r\n                      displayType={\"text\"}\r\n                      thousandSeparator={true}\r\n                    />\r\n                  </span>\r\n                </p>\r\n                <p>\r\n                  <label>Region:</label> <span>{country.region}</span>\r\n                </p>\r\n                <p>\r\n                  <label>Sub-Region:</label> <span>{country.region}</span>\r\n                </p>\r\n                <p>\r\n                  <label>Capital:</label> <span>{country.capital}</span>\r\n                </p>\r\n              </div>\r\n              <div className=\"country__info__right\">\r\n                <p>\r\n                  <label>Top Level Domain:</label> <span>{country.topLevelDomain}</span>\r\n                </p>\r\n                <p>\r\n                  <label>Currencies:</label> <span>{currencies.map((x) => x.name).join(', ')}</span>\r\n                </p>\r\n                <p>\r\n                  <label>Language:</label>  <span>{languages.map((x) => x.name).join(', ')}</span>\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <div className=\"border__countries\">\r\n  <label>Border Countries:</label> <p>{borders.map((x, index)=> (<Link to={`/details/${x.name}`}  key={index} className=\"border__link\"><span className=\"border\">{x.name}</span></Link>))}</p>\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Details;\r\n","import React from 'react'\nimport Header from '../src/components/Header';\nimport Country from '../src/components/Country';\nimport Details from '../src/components/Details';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Router>\n      <Header />\n       <Switch>\n         <Route path=\"/details/:name\">\n           <Details />\n         </Route>\n         <Route path=\"/\">\n           <Country />\n         </Route>\n       </Switch>\n     </Router>\n    </div>\n  )\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}