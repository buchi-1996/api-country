{"version":3,"sources":["components/Header.jsx","components/CountryCard.jsx","components/Country.jsx","components/Details.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","AppBar","position","className","Toolbar","Container","CountryCard","name","flag","population","region","capital","Grid","item","key","xs","sm","md","lg","Card","CardMedia","style","height","image","title","CardContent","to","value","displayType","thousandSeparator","Country","useState","Countries","setCountries","select","setSelect","Search","setSearch","useEffect","a","fetch","response","json","resData","dataFile","map","data","nativeName","borderCountries","borders","languages","currencies","subregion","topLevelDomain","console","log","getCountries","handleChange","e","target","filteredCountries","filter","country","toLowerCase","includes","maxWidth","type","onChange","placeholder","FormControl","Select","variant","MenuItem","container","spacing","Details","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.53e830c1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { AppBar, Container, Toolbar } from \"@material-ui/core\";\r\nimport NightsStayOutlinedIcon from \"@material-ui/icons/NightsStayOutlined\";\r\nimport \"./header.css\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <AppBar position=\"static\" className=\"header\">\r\n      <Toolbar>\r\n        <Container className=\"header__nav\">\r\n          <h3>where in the world?</h3>\r\n          <div className=\"toggle__mode\">\r\n            <NightsStayOutlinedIcon className=\"night__icon\" />{\" \"}\r\n            <span>Dark Mode</span>\r\n          </div>\r\n        </Container>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport {\r\n    Grid,\r\n    Card,\r\n    CardMedia,\r\n    CardContent,\r\n  } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport NumberFormat from \"react-number-format\";\r\n\r\nimport './countrycard.css';\r\n\r\nfunction CountryCard({name, flag, population, region, capital}) {\r\n  return (\r\n    <Grid\r\n      item\r\n      key={name}\r\n      xs={12}\r\n      sm={6}\r\n      md={4}\r\n      lg={3}\r\n      className=\"grid__flex\"\r\n    >\r\n      <Card className=\"card__flex\">\r\n        <CardMedia\r\n          style={{ height: \"200px\" }}\r\n          image={flag}\r\n          title={name}\r\n        />\r\n        <CardContent className=\"card__text\">\r\n          <h4>\r\n            <Link to=\"/details\" className=\"link\">{name}</Link>\r\n          </h4>\r\n          <p>\r\n            <label>Population:</label>\r\n            <span>\r\n              <NumberFormat\r\n                value={population}\r\n                displayType={\"text\"}\r\n                thousandSeparator={true}\r\n              />\r\n            </span>\r\n          </p>\r\n          <p>\r\n            <label>Region:</label> <span>{region}</span>\r\n          </p>\r\n          <p>\r\n            <label>Capital:</label> <span>{capital}</span>\r\n          </p>\r\n        </CardContent>\r\n      </Card>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default CountryCard;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport {\r\n  FormControl,\r\n  MenuItem,\r\n  Select,\r\n  Grid,\r\n  Container,\r\n} from \"@material-ui/core\";\r\nimport CountryCard  from './CountryCard';\r\nimport \"./country.css\";\r\n\r\nfunction Country() {\r\n  const [Countries, setCountries] = useState([]);\r\n  const [select, setSelect] = useState(\"Filter by region\");\r\n  const [Search, setSearch] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    async function getCountries() {\r\n      const response = await fetch(\"https://restcountries.eu/rest/v2/all\");\r\n      const resData = await response.json();\r\n      const dataFile = resData.map((data) => ({\r\n        name: data.name,\r\n        flag: data.flag,\r\n        capital: data.capital,\r\n        region: data.region,\r\n        population: data.population,\r\n        nativeName: data.nativeName,\r\n        borderCountries: data.borders,\r\n        languages: data.languages,\r\n        currencies: data.currencies,\r\n        subregion: data.subregion,\r\n        topLevelDomain: data.topLevelDomain,\r\n      }));\r\n      console.log(resData);\r\n      setCountries(dataFile);\r\n    }\r\n\r\n    getCountries();\r\n  }, []);\r\n\r\n  const handleChange = async (e) => {\r\n    const region = e.target.value;\r\n    setSelect(region);\r\n    setSearch(\"\");\r\n  };\r\n\r\n  const filteredCountries = Countries.filter((country) => {\r\n    if (select === \"Filter by region\") {\r\n      return country.name.toLowerCase().includes(Search.toLowerCase());\r\n    } else {\r\n      return (\r\n        country.name.toLowerCase().includes(Search.toLowerCase()) &&\r\n        country.region.toLowerCase().includes(select.toLowerCase())\r\n      );\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <Container maxWidth=\"lg\" className=\"form__row\">\r\n        <div className=\"search__area\">\r\n          <div className=\"search__box1\">\r\n            <SearchIcon className=\"search__icon\" />\r\n            <input\r\n              type=\"text\"\r\n              onChange={(e) => setSearch(e.target.value)}\r\n              className=\"search__box  form-control\"\r\n              placeholder=\"Search for a country...\"\r\n            />\r\n          </div>\r\n          <div className=\"search__box2\">\r\n            <FormControl>\r\n              <Select\r\n                variant=\"outlined\"\r\n                className=\"input__select\"\r\n                value={select}\r\n                onChange={handleChange}\r\n              >\r\n                <MenuItem value=\"Filter by region\">Filter by region</MenuItem>\r\n                <MenuItem value=\"Africa\">Africa</MenuItem>\r\n                <MenuItem value=\"Americas\">Americas</MenuItem>\r\n                <MenuItem value=\"Asia\">Asia</MenuItem>\r\n                <MenuItem value=\"Europe\">Europe</MenuItem>\r\n                <MenuItem value=\"Oceania\">Oceania</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </div>\r\n        </div>\r\n      </Container>\r\n      <Container maxWidth=\"lg\">\r\n        <Grid container spacing={3}>\r\n          {filteredCountries.map((country) => {\r\n            return <CountryCard {...country}/>\r\n          })}\r\n        </Grid>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Country;\r\n","import React from 'react'\r\nimport {\r\n    FormControl,\r\n    MenuItem,\r\n    Select,\r\n    Grid,\r\n    Container,\r\n  } from \"@material-ui/core\";\r\n\r\nfunction Details() {\r\n    return (\r\n        <Container>\r\n           <p>Details page coming soon. </p>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Details\r\n","import React from 'react'\nimport Header from '../src/components/Header';\nimport Country from '../src/components/Country';\nimport Details from '../src/components/Details';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Router>\n       <Switch>\n         <Route path=\"/details\">\n         <Header />\n           <Details />\n         </Route>\n         <Route path=\"/\">\n           <Header />\n           <Country />\n         </Route>\n       </Switch>\n     </Router>\n    </div>\n  )\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}